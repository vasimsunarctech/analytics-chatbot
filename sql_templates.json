{
  "templates": [
    {
      "id": "top_performing_spvs",
      "description": "Rank SPVs by highest revenue variance versus plan.",
      "match_phrases": [
        "top performing spvs",
        "best performing spvs",
        "top revenue spvs",
        "top performing spv",
        "top 5 performing",
        "top performing",
        "best performing projects",
        "top performing projects",
        "performing assets"
      ],
      "sql_template": "SELECT TOP ({limit})\n    project,\n    SUM(\n        CAST(\n            (COALESCE(cash, 0)\n             + COALESCE(fastag, 0)\n             + COALESCE(others, 0)\n             + COALESCE(overload, 0)\n             + COALESCE(pass_amount, 0))\n            - COALESCE(double_penalty, 0)\n        AS DECIMAL(18,2))\n    ) AS revenue,\n    SUM(CAST(budget AS DECIMAL(18,2))) AS budget,\n    ROUND(\n        (\n            (\n                SUM(\n                    CAST(\n                        (COALESCE(cash, 0)\n                         + COALESCE(fastag, 0)\n                         + COALESCE(others, 0)\n                         + COALESCE(overload, 0)\n                         + COALESCE(pass_amount, 0))\n                        - COALESCE(double_penalty, 0)\n                    AS DECIMAL(18,2))\n                )\n                - SUM(CAST(budget AS DECIMAL(18,2)))\n            )\n            / NULLIF(SUM(CAST(budget AS DECIMAL(18,2))), 0.0)\n        ) * 100.0,\n        2\n    ) AS performance_pct\nFROM dbo.ods_tmsdata_revenue\nWHERE [date] >= '{start_datetime}'\n  AND [date] <= '{end_datetime}'\nGROUP BY project\nORDER BY performance_pct DESC;",
      "defaults": {
        "limit": 5,
        "time_window": "current_fiscal_year"
      },
      "limits": {
        "limit": {
          "min": 1,
          "max": 50
        }
      }
    },
    {
      "id": "top_non_performing_spvs",
      "description": "Identify SPVs with the weakest revenue performance versus plan, sorted by lowest variance.",
      "match_phrases": [
        "top non performing spvs",
        "non performing spvs",
        "non-performing spvs",
        "non performing spv",
        "non-performing spv",
        "worst performing spvs",
        "lowest performing spvs",
        "top 5 non performing",
        "top non performing",
        "worst performing projects",
        "non performing assets",
        "Top 5 non performing assets"
      ],
      "sql_template": "SELECT TOP ({limit})\n    project,\n    SUM(\n        CAST(\n            (COALESCE(cash, 0)\n             + COALESCE(fastag, 0)\n             + COALESCE(others, 0)\n             + COALESCE(overload, 0)\n             + COALESCE(pass_amount, 0))\n            - COALESCE(double_penalty, 0)\n        AS DECIMAL(18,2))\n    ) AS revenue,\n    SUM(CAST(budget AS DECIMAL(18,2))) AS budget,\n    ROUND(\n        (\n            (\n                SUM(\n                    CAST(\n                        (COALESCE(cash, 0)\n                         + COALESCE(fastag, 0)\n                         + COALESCE(others, 0)\n                         + COALESCE(overload, 0)\n                         + COALESCE(pass_amount, 0))\n                        - COALESCE(double_penalty, 0)\n                    AS DECIMAL(18,2))\n                )\n                - SUM(CAST(budget AS DECIMAL(18,2)))\n            )\n            / NULLIF(SUM(CAST(budget AS DECIMAL(18,2))), 0.0)\n        ) * 100.0,\n        2\n    ) AS performance_pct\nFROM dbo.ods_tmsdata_revenue\nWHERE [date] >= '{start_datetime}'\n  AND [date] <= '{end_datetime}'\nGROUP BY project\nORDER BY performance_pct ASC;",
      "defaults": {
        "limit": 5,
        "time_window": "current_fiscal_year"
      },
      "limits": {
        "limit": {
          "min": 1,
          "max": 50
        }
      }
    },
    {
      "id": "yearly_revenue_plan",
      "description": "Summarise planned revenue by project and plaza for the fiscal window.",
      "match_phrases": [
        "yearly plan of revenue",
        "yearly revenue plan",
        "annual revenue plan",
        "plan of revenue collection"
      ],
      "sql_template": "SELECT\n    project,\n    plaza,\n    SUM(CAST(budget AS DECIMAL(18,2))) AS yearly_plan\nFROM dbo.ods_tmsdata_revenue\nWHERE [date] >= '{start_datetime}'\n  AND [date] <= '{end_datetime}'\nGROUP BY project, plaza\nORDER BY yearly_plan DESC;",
      "defaults": {
        "time_window": "current_fiscal_year"
      }
    },
    {
      "id": "top_high_exemption_spvs",
      "description": "List SPVs with the highest exemption percentage over the selected window.",
      "match_phrases": [
        "top higher exemption spvs",
        "higher exemption spvs",
        "highest exemption spvs",
        "top exemption spvs",
        "highest exemption"
      ],
      "sql_template": "SELECT TOP ({limit})\n    project_name,\n    SUM(CASE WHEN final_journey_type IN ('Exemption', 'Exempt - Forced Free') THEN COALESCE(traffic_count, 0) ELSE 0 END) AS exempt_traffic,\n    SUM(COALESCE(traffic_count, 0)) AS total_traffic,\n    ROUND(\n        (SUM(CASE WHEN final_journey_type IN ('Exemption', 'Exempt - Forced Free') THEN COALESCE(traffic_count, 0) ELSE 0 END) * 100.0)\n        / NULLIF(SUM(COALESCE(traffic_count, 0)) * 1.0, 0),\n        2\n    ) AS exemption_pct\nFROM dbo.daily_transaction_final\nWHERE transaction_date_time >= '{start_datetime}'\n  AND transaction_date_time <= '{end_datetime}'\nGROUP BY project_name\nHAVING SUM(COALESCE(traffic_count, 0)) > 0\nORDER BY exemption_pct DESC;",
      "defaults": {
        "limit": 5,
        "time_window": "current_fiscal_year"
      },
      "limits": {
        "limit": {
          "min": 1,
          "max": 50
        }
      }
    },
    {
      "id": "top_low_exemption_spvs",
      "description": "List SPVs with the lowest exemption percentage over the selected window.",
      "match_phrases": [
        "top lower exemption spvs",
        "lower exemption spvs",
        "lowest exemption spvs",
        "least exemption spvs",
        "lowest exemption"
      ],
      "sql_template": "SELECT TOP ({limit})\n    project_name,\n    SUM(CASE WHEN final_journey_type IN ('Exemption', 'Exempt - Forced Free') THEN COALESCE(traffic_count, 0) ELSE 0 END) AS exempt_traffic,\n    SUM(COALESCE(traffic_count, 0)) AS total_traffic,\n    ROUND(\n        (SUM(CASE WHEN final_journey_type IN ('Exemption', 'Exempt - Forced Free') THEN COALESCE(traffic_count, 0) ELSE 0 END) * 100.0)\n        / NULLIF(SUM(COALESCE(traffic_count, 0)) * 1.0, 0),\n        2\n    ) AS exemption_pct\nFROM dbo.daily_transaction_final\nWHERE transaction_date_time >= '{start_datetime}'\n  AND transaction_date_time <= '{end_datetime}'\nGROUP BY project_name\nHAVING SUM(COALESCE(traffic_count, 0)) > 0\nORDER BY exemption_pct ASC;",
      "defaults": {
        "limit": 5,
        "time_window": "current_fiscal_year"
      },
      "limits": {
        "limit": {
          "min": 1,
          "max": 50
        }
      }
    },
    {
      "id": "exemption_yoy_comparison",
      "description": "Compare exemption share year-over-year for each SPV.",
      "match_phrases": [
        "comparison of exemption yoy",
        "exemption yoy",
        "exemption year over year",
        "yoy exemption comparison"
      ],
      "sql_template": "WITH aggregates AS (\n    SELECT\n        project_name,\n        SUM(CASE WHEN transaction_date_time >= '{start_datetime}' AND transaction_date_time <= '{end_datetime}' THEN COALESCE(traffic_count, 0) ELSE 0 END) AS curr_total,\n        SUM(CASE WHEN transaction_date_time >= '{start_datetime}' AND transaction_date_time <= '{end_datetime}'\n                 AND final_journey_type IN ('Exemption', 'Exempt - Forced Free') THEN COALESCE(traffic_count, 0) ELSE 0 END) AS curr_exempt,\n        SUM(CASE WHEN transaction_date_time >= '{previous_start_datetime}' AND transaction_date_time <= '{previous_end_datetime}' THEN COALESCE(traffic_count, 0) ELSE 0 END) AS prev_total,\n        SUM(CASE WHEN transaction_date_time >= '{previous_start_datetime}' AND transaction_date_time <= '{previous_end_datetime}'\n                 AND final_journey_type IN ('Exemption', 'Exempt - Forced Free') THEN COALESCE(traffic_count, 0) ELSE 0 END) AS prev_exempt\n    FROM dbo.daily_transaction_final\n    WHERE transaction_date_time >= '{previous_start_datetime}'\n      AND transaction_date_time <= '{end_datetime}'\n    GROUP BY project_name\n)\nSELECT\n    project_name,\n    ROUND(COALESCE(CAST(curr_total AS DECIMAL(18, 2)), 0), 0) AS total_traffic_current_year,\n    ROUND(COALESCE(CAST(curr_exempt AS DECIMAL(18, 2)), 0), 0) AS exemption_traffic_current_year,\n    ROUND(COALESCE(CAST(prev_total AS DECIMAL(18, 2)), 0), 0) AS total_traffic_previous_year,\n    ROUND(COALESCE(CAST(prev_exempt AS DECIMAL(18, 2)), 0), 0) AS exemption_traffic_previous_year,\n    COALESCE(\n        ROUND(\n            ((curr_exempt * 100.0) / NULLIF(curr_total, 0))\n            - ((prev_exempt * 100.0) / NULLIF(prev_total, 0)),\n            2\n        ),\n        0\n    ) AS yoy_change_pct\nFROM aggregates\nORDER BY yoy_change_pct DESC;",
      "defaults": {
        "time_window": "current_fiscal_year"
      }
    },
    {
      "id": "traffic_yoy_variance",
      "description": "Calculate year-over-year traffic growth percentage for each SPV.",
      "match_phrases": [
        "traffic growth yoy",
        "traffic yoy variance",
        "traffic year over year",
        "traffic yoy change"
      ],
      "sql_template": "WITH aggregates AS (\n    SELECT\n        project_name,\n        SUM(CASE WHEN transaction_date_time >= '{start_datetime}' AND transaction_date_time <= '{end_datetime}' THEN COALESCE(traffic_count, 0) ELSE 0 END) AS curr_total,\n        SUM(CASE WHEN transaction_date_time >= '{previous_start_datetime}' AND transaction_date_time <= '{previous_end_datetime}' THEN COALESCE(traffic_count, 0) ELSE 0 END) AS prev_total\n    FROM dbo.daily_transaction_final\n    WHERE transaction_date_time >= '{previous_start_datetime}'\n      AND transaction_date_time <= '{end_datetime}'\n    GROUP BY project_name\n)\nSELECT\n    project_name,\n    ROUND(COALESCE(CAST(curr_total AS DECIMAL(18, 2)), 0), 0) AS total_traffic_current_year,\n    ROUND(COALESCE(CAST(prev_total AS DECIMAL(18, 2)), 0), 0) AS total_traffic_previous_year,\n    COALESCE(\n        ROUND(((curr_total - prev_total) * 100.0) / NULLIF(prev_total, 0), 2),\n        0\n    ) AS yoy_change_pct\nFROM aggregates\nORDER BY yoy_change_pct DESC;",
      "defaults": {
        "time_window": "current_fiscal_year"
      }
    },
    {
      "id": "revenue_plan_vs_actual",
      "description": "Compare planned and actual revenue by project with variance amounts and percentages.",
      "match_phrases": [
        "plan vs actual revenue",
        "planned vs actual revenue",
        "revenue variance vs plan",
        "planned and actual revenue",
        "planned vs actual revenue collection",
        "planned v/s actual revenue collection",
        "planned vs actual of revenue collection",
        "planned v/s actual of revenue collection",
        "planned vs actual of revenue",
        "planned v/s actual of revenue",
        "spv wise revenue",
        "spvs wise revenue",
        "Budget vs actual revenue",
        "Budget v/s actual revenue",
        "SPV wise revenue"
      ],
      "sql_template": "WITH source_data AS (\n    SELECT\n        project,\n        TRY_CONVERT(DECIMAL(18, 2), budget) AS planned_value,\n        COALESCE(TRY_CONVERT(DECIMAL(18, 2), cash), 0)\n          + COALESCE(TRY_CONVERT(DECIMAL(18, 2), fastag), 0)\n          + COALESCE(TRY_CONVERT(DECIMAL(18, 2), others), 0)\n          + COALESCE(TRY_CONVERT(DECIMAL(18, 2), overload), 0)\n          + COALESCE(TRY_CONVERT(DECIMAL(18, 2), pass_amount), 0)\n          - COALESCE(TRY_CONVERT(DECIMAL(18, 2), double_penalty), 0) AS actual_value\n    FROM dbo.ods_tmsdata_revenue\n    WHERE [date] >= '{start_datetime}'\n      AND [date] <= '{end_datetime}'\n)\nSELECT\n    project,\n    SUM(COALESCE(planned_value, 0)) AS planned_revenue,\n    SUM(actual_value) AS actual_revenue,\n    SUM(actual_value) - SUM(COALESCE(planned_value, 0)) AS variance_amount,\n    CASE\n        WHEN SUM(COALESCE(planned_value, 0)) = 0 THEN NULL\n        ELSE ROUND((SUM(actual_value) - SUM(COALESCE(planned_value, 0))) * 100.0 / NULLIF(SUM(COALESCE(planned_value, 0)), 0), 2)\n    END AS variance_pct\nFROM source_data\nGROUP BY project\nORDER BY variance_pct DESC;",
      "defaults": {
        "time_window": "current_fiscal_year"
      }
    },
    {
      "id": "yearly_plan_by_project",
      "description": "Summarise planned revenue by project across the selected window.",
      "match_phrases": [
        "yearly plan for revenue",
        "yearly revenue plan",
        "annual revenue plan by project",
        "revenue plan for the year"
      ],
      "sql_template": "SELECT\n    project,\n    SUM(CAST(budget AS DECIMAL(18, 2))) AS planned_revenue\nFROM dbo.ods_tmsdata_revenue\nWHERE [date] >= '{start_datetime}'\n  AND [date] <= '{end_datetime}'\nGROUP BY project\nORDER BY planned_revenue DESC;",
      "defaults": {
        "time_window": "current_fiscal_year"
      }
    },
    {
      "id": "traffic_variance_vs_plan",
      "description": "Compare planned and actual traffic volumes with variance and achievement percentages by project.",
      "match_phrases": [
        "traffic variance planned vs actual",
        "planned vs actual traffic",
        "planned v/s actual traffic",
        "traffic growth variance vs plan",
        "traffic achievement vs plan",
        "Budget vs Traffic",
        "Budget v/s Traffic",
        "SPV wise Traffic",
        "spv wise Traffic",
        "SPVs wise Traffic",
        "SPVs wise Traffic count"
      ],
      "sql_template": "WITH params AS (\n    SELECT\n        CAST('{start_datetime}' AS datetime) AS start_dt,\n        CAST('{end_datetime}' AS datetime) AS end_dt,\n        CAST('{start_date}' AS date) AS start_date\n),\nfiscal AS (\n    SELECT\n        start_dt,\n        end_dt,\n        CASE\n            WHEN MONTH(start_date) < 4 THEN YEAR(start_date) - 1\n            ELSE YEAR(start_date)\n        END AS fiscal_start_year\n    FROM params\n),\nbudget AS (\n    SELECT\n        CASE WHEN [ SPV ] = 'AJTL' THEN 'CSJTPL' ELSE [ SPV ] END AS project_name,\n        SUM(CAST([Traffic Budgets] AS DECIMAL(18, 6))) AS planned_traffic\n    FROM dbo.Budget_Traffic AS bt\n    CROSS JOIN fiscal\n    WHERE bt.[Year] = CONCAT('FY', RIGHT(CAST(fiscal.fiscal_start_year AS char(4)), 2), '-', RIGHT(CAST(fiscal.fiscal_start_year + 1 AS char(4)), 2))\n    GROUP BY CASE WHEN [ SPV ] = 'AJTL' THEN 'CSJTPL' ELSE [ SPV ] END\n),\nactual AS (\n    SELECT\n        dt.project_name,\n        SUM(COALESCE(dt.traffic_count, 0)) AS actual_traffic\n    FROM dbo.daily_transaction_final AS dt\n    CROSS JOIN params AS p\n    WHERE dt.transaction_date_time >= p.start_dt\n      AND dt.transaction_date_time <= p.end_dt\n    GROUP BY dt.project_name\n)\nSELECT\n    COALESCE(a.project_name, b.project_name) AS project_name,\n    ROUND(COALESCE(b.planned_traffic, 0), 2) AS planned_traffic,\n    COALESCE(a.actual_traffic, 0) AS actual_traffic,\n    COALESCE(a.actual_traffic, 0) - COALESCE(b.planned_traffic, 0) AS variance_traffic,\n    CASE\n        WHEN COALESCE(b.planned_traffic, 0) = 0 THEN NULL\n        ELSE ROUND((COALESCE(a.actual_traffic, 0) - COALESCE(b.planned_traffic, 0)) * 100.0 / NULLIF(COALESCE(b.planned_traffic, 0), 0), 2)\n    END AS variance_pct,\n    CASE\n        WHEN COALESCE(b.planned_traffic, 0) = 0 THEN NULL\n        ELSE ROUND(COALESCE(a.actual_traffic, 0) * 100.0 / NULLIF(COALESCE(b.planned_traffic, 0), 0), 2)\n    END AS achievement_pct\nFROM actual AS a\nFULL OUTER JOIN budget AS b\n    ON b.project_name = a.project_name\nORDER BY project_name;",
      "defaults": {
        "time_window": "current_fiscal_year"
      }
    },
    {
      "id": "daily_pcu_traffic",
      "description": "List daily traffic counts and PCU totals by project within the selected period.",
      "match_phrases": [
        "traffic pcu per day",
        "pcu traffic per day",
        "daily pcu traffic",
        "pcu count per day",
        "number of traffic pcu per day",
        "traffic pcu count per day"
      ],
      "sql_template": "SELECT TOP ({limit})\n    project_name,\n    CAST(transaction_date_time AS date) AS traffic_date,\n    SUM(COALESCE(traffic_count, 0)) AS total_traffic_count,\n    SUM(CAST(COALESCE(pcu_traffic_charged, 0) AS DECIMAL(18, 2))) AS daily_pcu_traffic\nFROM dbo.daily_transaction_final\nWHERE transaction_date_time >= '{start_datetime}'\n  AND transaction_date_time <= '{end_datetime}'\nGROUP BY project_name, CAST(transaction_date_time AS date)\nORDER BY traffic_date DESC, project_name;",
      "defaults": {
        "limit": 200,
        "time_window": "current_fiscal_year"
      },
      "limits": {
        "limit": {
          "min": 10,
          "max": 500
        }
      }
    },
    {
      "id": "average_daily_traffic",
      "description": "Calculate average daily traffic counts by project for the selected window.",
      "match_phrases": [
        "average daily traffic",
        "avg daily traffic",
        "mean daily traffic count",
        "average traffic per day"
      ],
      "sql_template": "WITH daily_totals AS (\n    SELECT\n        project_name,\n        CAST(transaction_date_time AS date) AS traffic_date,\n        SUM(COALESCE(traffic_count, 0)) AS daily_traffic_count\n    FROM dbo.daily_transaction_final\n    WHERE transaction_date_time >= '{start_datetime}'\n      AND transaction_date_time <= '{end_datetime}'\n    GROUP BY project_name, CAST(transaction_date_time AS date)\n)\nSELECT\n    project_name,\n    ROUND(AVG(CAST(daily_traffic_count AS DECIMAL(18, 2))), 2) AS avg_daily_traffic_count\nFROM daily_totals\nGROUP BY project_name\nORDER BY project_name;",
      "defaults": {
        "time_window": "current_fiscal_year"
      }
    },
    {
      "id": "yesterday_revenue_traffic",
      "description": "Return revenue and traffic totals by project and plaza for the requested day.",
      "match_phrases": [
        "yesterday revenue and traffic",
        "revenue yesterday",
        "traffic yesterday",
        "yesterday's revenue and traffic",
        "revenue and traffic",
        "revenue and traffic for",
        "traffic and revenue",
        "revenue & traffic"
      ],
      "sql_template": "SELECT\n    project,\n    plaza,\n    CAST([date] AS date) AS revenue_date,\n    SUM(CAST((COALESCE(cash, 0)\n              + COALESCE(fastag, 0)\n              + COALESCE(others, 0)\n              + COALESCE(overload, 0)\n              + COALESCE(pass_amount, 0)\n              - COALESCE(double_penalty, 0)) AS DECIMAL(18, 2))) AS total_revenue,\n    SUM(COALESCE(traffic_count, 0)) AS total_traffic\nFROM dbo.ods_tmsdata_revenue\nWHERE [date] >= '{start_datetime}'\n  AND [date] <= '{end_datetime}'\nGROUP BY project, plaza, CAST([date] AS date)\nORDER BY project, plaza;",
      "defaults": {
        "time_window": "current_fiscal_year"
      }
    },
    {
      "id": "revenue_trend_vs_budget",
      "description": "Show daily planned versus actual revenue with variance amounts and percentages.",
      "match_phrases": [
        "revenue trend vs budget",
        "revenue versus budget trend",
        "planned vs actual revenue trend",
        "revenue trend against plan",
        "provide the revenue trend vs budget",
        "revenue trend versus budget"
      ],
      "sql_template": "WITH revenue AS (\n    SELECT\n        CAST([date] AS date) AS revenue_date,\n        project,\n        TRY_CONVERT(DECIMAL(18, 2), budget) AS planned_revenue,\n        COALESCE(TRY_CONVERT(DECIMAL(18, 2), cash), 0)\n          + COALESCE(TRY_CONVERT(DECIMAL(18, 2), fastag), 0)\n          + COALESCE(TRY_CONVERT(DECIMAL(18, 2), others), 0)\n          + COALESCE(TRY_CONVERT(DECIMAL(18, 2), overload), 0)\n          + COALESCE(TRY_CONVERT(DECIMAL(18, 2), pass_amount), 0)\n          - COALESCE(TRY_CONVERT(DECIMAL(18, 2), double_penalty), 0) AS actual_revenue\n    FROM dbo.ods_tmsdata_revenue\n    WHERE [date] >= '{start_datetime}'\n      AND [date] <= '{end_datetime}'\n)\nSELECT TOP ({limit})\n    revenue_date,\n    project,\n    SUM(COALESCE(planned_revenue, 0)) AS planned_revenue,\n    SUM(actual_revenue) AS actual_revenue,\n    SUM(actual_revenue) - SUM(COALESCE(planned_revenue, 0)) AS variance_amount,\n    CASE\n        WHEN SUM(COALESCE(planned_revenue, 0)) = 0 THEN NULL\n        ELSE ROUND((SUM(actual_revenue) - SUM(COALESCE(planned_revenue, 0))) * 100.0 / NULLIF(SUM(COALESCE(planned_revenue, 0)), 0), 2)\n    END AS variance_pct\nFROM revenue\nGROUP BY revenue_date, project\nORDER BY revenue_date DESC, project;",
      "defaults": {
        "limit": 365,
        "time_window": "current_fiscal_year"
      },
      "limits": {
        "limit": {
          "min": 30,
          "max": 730
        }
      }
    },
    {
      "id": "fastag_collection_percentage",
      "description": "Calculate the share of revenue attributable to FASTag collections by project and plaza.",
      "match_phrases": [
        "fastag collection percentage",
        "percentage of fastag collections",
        "fastag share of revenue",
        "fastag contribution percent"
      ],
      "sql_template": "WITH revenue AS (\n    SELECT\n        project,\n        plaza,\n        COALESCE(fastag, 0) AS fastag_amount,\n        CAST((COALESCE(cash, 0)\n              + COALESCE(fastag, 0)\n              + COALESCE(others, 0)\n              + COALESCE(overload, 0)\n              + COALESCE(pass_amount, 0)\n              - COALESCE(double_penalty, 0)) AS DECIMAL(18, 2)) AS total_revenue\n    FROM dbo.ods_tmsdata_revenue\n    WHERE [date] >= '{start_datetime}'\n      AND [date] <= '{end_datetime}'\n)\nSELECT\n    project,\n    plaza,\n    SUM(fastag_amount) AS fastag_collection,\n    SUM(total_revenue) AS total_revenue,\n    CASE\n        WHEN SUM(total_revenue) = 0 THEN NULL\n        ELSE ROUND(SUM(fastag_amount) * 100.0 / NULLIF(SUM(total_revenue), 0), 2)\n    END AS fastag_pct\nFROM revenue\nGROUP BY project, plaza\nORDER BY project, plaza;",
      "defaults": {
        "time_window": "current_fiscal_year"
      }
    },
    {
      "id": "last_month_revenue_traffic",
      "description": "Summarise total revenue and traffic for the most recently completed month by project and plaza.",
      "match_phrases": [
        "last month revenue and traffic",
        "revenue last month",
        "traffic last month",
        "last month's revenue and traffic"
      ],
      "sql_template": "WITH bounds AS (\n    SELECT\n        DATEADD(month, -1, DATEFROMPARTS(YEAR(EOMONTH('{end_datetime}')), MONTH(EOMONTH('{end_datetime}')), 1)) AS period_start,\n        DATEFROMPARTS(YEAR(EOMONTH('{end_datetime}')), MONTH(EOMONTH('{end_datetime}')), 1) AS period_end\n),\nrevenue AS (\n    SELECT\n        r.project,\n        r.plaza,\n        CAST(r.[date] AS date) AS revenue_date,\n        COALESCE(r.traffic_count, 0) AS traffic_count,\n        COALESCE(TRY_CONVERT(DECIMAL(18, 2), r.cash), 0)\n          + COALESCE(TRY_CONVERT(DECIMAL(18, 2), r.fastag), 0)\n          + COALESCE(TRY_CONVERT(DECIMAL(18, 2), r.others), 0)\n          + COALESCE(TRY_CONVERT(DECIMAL(18, 2), r.overload), 0)\n          + COALESCE(TRY_CONVERT(DECIMAL(18, 2), r.pass_amount), 0)\n          - COALESCE(TRY_CONVERT(DECIMAL(18, 2), r.double_penalty), 0) AS revenue_amount\n    FROM dbo.ods_tmsdata_revenue AS r\n    CROSS JOIN bounds AS b\n    WHERE r.[date] >= b.period_start\n      AND r.[date] < b.period_end\n)\nSELECT\n    project,\n    plaza,\n    SUM(revenue_amount) AS total_revenue,\n    SUM(traffic_count) AS total_traffic\nFROM revenue\nGROUP BY project, plaza\nORDER BY project, plaza;",
      "defaults": {
        "time_window": "current_fiscal_year"
      }
    }
  ]
}
